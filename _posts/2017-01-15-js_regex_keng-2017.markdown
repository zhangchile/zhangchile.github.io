---
layout: post
title : javascript正则[/g]标志的那些坑
subtitle: ""
date: 2017-01-15
author: "chile.zhang"
header-img: "img/post-bg-2016.jpg"
tags:
    - 正则
    - Javascript
    - 前端
---


## javascript正则[/g]标志的坑

### regexp.test()函数

```javascript  
var str = '_a_a';
var regex = /a/g;
regex.test(str);
```  

这里要十分注意的是`test()`每次调用都会从上一次匹配的位置之后开始进行下一次进行匹配，初次执行的时的位置就是0，可以通过regex.lastIndex的值来查看当前的位置。上代码  

```javascript  
> var regex = /a/g;
> regex.lastIndex
0
> regex.test(str)
true
> regex.lastIndex
2
> regex.test(str)
true
> regex.lastIndex
4
> regex.test(str)
false
```

以上的特性，如果不小心用在while里来计算匹配了多少个，可能会导致死循环。  

```javascript  
// 不要运行这段代码，会死循环
var count = 0;
while(/a/g.test(str)) count++;
```

上面的代码里/a/g.test(str)每次调用都会创建一个新的regex对象，导致test函数返回结果永远为真。  
正确的写法应该是  

```javascript  
var count = 0;
var regex = /a/g;
while(regex.test(str)) count++;
```

或者其实用String.prototype.match()更加好，这个会返回匹配到的值，直接取结果的length就好。  
当正则为参数传入函数时也要注意这个问题  

```javascript   
function countMatch(regex, str) {
  var count = 0;
  while(regex.test(str)) count++;
  return count;
}
```

上面的函数如果传入的正则不包含/g，同样也会导致死循环，或者说正则在传进来之前lastIndex就不为0的，那计算的值就是不准确的。  
好的处理方法应该是  

```javascript  
function countMatch(regex, str) {
  var originalIndex = regex.lastIndex;
  regex.lastIndex = 0; // 重置为0
  if (!regex.global) {
    // 没有/g标志
    return regex.test(str)*1;
  }
  while(regex.test(str)) count++;
  return count; 
}
```

或者直接用match函数来完成这个功能  

```javascript
function countMatch(regex, str) {
  if (str) {
    return (str.match(regex) || [] ).length;
  }
  return 0;
}
```

### regexp.exec()函数

exec()函数跟test()的操作流程挺像，只不过在找到了第一个匹配值后，是返回这个值，并附带index和input属性，而不是返回boolean，并把lastIndex的值设为最后匹配的值的位置后一位，直到最后没有可以匹配的，会返回null，并把lastIndex设为0；  

```javascript  
var regex = /a/g;
var str = '_a_a';
var result;
while( (result=regex.exec(str) ) != null ) {
  console.log(result);
  console.log(regex.lastIndex);
}
// ["a", index: 1, input: "_a_a"] 2
// ["a", index: 3, input: "_a_a"] 4
```

### String.prototype.match()函数
match()函数是直接返回匹配到的值并转为数组如果有的话，否则是会返回null的。  

```javascript  
> '_a_a'.match(/a/)
["a"]
> '_a_a'.match(/a/g)
["a", "a"]
> '_a_a'.match(/b/g)
null
```
