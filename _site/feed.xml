<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chile.zhang</title>
    <description>chile.zhang的博客 | chile.zhang</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 28 Nov 2016 23:17:00 +0800</pubDate>
    <lastBuildDate>Mon, 28 Nov 2016 23:17:00 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>模块化加载标准的理解</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;模块化加载标准的理解&lt;/h2&gt;

&lt;h3 id=&quot;amdmodulesasynchronousdefinition&quot;&gt;AMD（Modules/AsynchronousDefinition）标准&lt;/h3&gt;
&lt;p&gt;在这个标准中，模块的加载都是提前异步加载的，模块中的变量都是包裹在一个函数define()中的，基本定义是这样的：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中id（模块标识），dependencies（依赖模块）是可选的参数，而factory是具体的功能函数或对象。
依赖会在执行factory前加载完成，factory是依赖加载后的回调，依赖的对象会依次注入到factory中。
一个完整的例子是这样的：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dependence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dependence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// use dependence obj to do something&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// dependence.foo()...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;所有的依赖都是提前加载的，即便没有用到也会加载。&lt;/li&gt;
  &lt;li&gt;包裹在define里可以很好的避免全局污染&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现这个标准且用得比较多的加载器：&lt;br /&gt;
[1].&lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;&lt;br /&gt;
[2].&lt;a href=&quot;https://github.com/cujojs/curl/&quot;&gt;curl.js&lt;/a&gt;&lt;br /&gt;
[3].&lt;a href=&quot;http://dojotoolkit.org/reference-guide/1.10/loader/&quot;&gt;Dojo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;moduleswrappings-&quot;&gt;Modules/Wrappings 标准&lt;/h3&gt;
&lt;p&gt;在这个规范中，模块加载是无需提前加载的，可以在模块的factory中按需加载的，这样可以大大的提高加载性能。&lt;/p&gt;

&lt;p&gt;这个标准目的是为了解决浏览器端的模块加载问题，多数情况下浏览器加载js文件是通过XMLHttpRequest或者动态插入scrip标签来加载的，
XMLHttpRequest是限制了同源策略，而动态插入的会无法共享同一个上下文，所以有了这个浏览器端模块加载器解决方案。&lt;br /&gt;
基本定义：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;declear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Sea.js使用的是这个规范&lt;/p&gt;

&lt;h3 id=&quot;commonjs&quot;&gt;CommonJS规范&lt;/h3&gt;
&lt;p&gt;这个规范最重要的是加载的时候是同步的，
基本定义：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;require是同步加载的，只有foo1加载完成了才会继续加载foo2模块，为的是解决服务端的模块加载问题&lt;/p&gt;

&lt;p&gt;Node.js使用的是这个规范。&lt;/p&gt;

&lt;p&gt;参考:&lt;br /&gt;
[1].&lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/Wrappings&quot;&gt;Modules Wrappings&lt;/a&gt;&lt;br /&gt;
[2].&lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition&quot;&gt;Modules AsynchronousDefinition&lt;/a&gt;&lt;br /&gt;
[3].&lt;a href=&quot;...&quot;&gt;common js&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/28/js_module_anlys-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/28/js_module_anlys-2016/</guid>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>welcome to my blog</title>
        <description>&lt;h2 id=&quot;hello-world&quot;&gt;Hello, World&lt;/h2&gt;

&lt;p&gt;2016 年 11月&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“One two begin!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;刚注册github的时候就想用github page 做自己的博客，但是一直都没找好看的模板，就放弃了，直到最近突然想起，找的了一个很不错的模板，感谢&lt;a href=&quot;https://huangxuan.me&quot;&gt;Hux&lt;/a&gt;开源了他自己的博客模板，让我又重新想用github page 写博客了。&lt;/p&gt;

&lt;p&gt;很多时候，我自己写的东西都是藏在Evernote里的，而且大部分都是剪藏网页放在那里，自己很少看，方便以后查阅。后来发现为何不整理后，用自己的理解知识分享给其他人，或许这样能帮人一把，比较每个的理解都不一样的，说不定刚好我的理解就帮到他了。&lt;/p&gt;

&lt;p&gt;于是，开始用github page 写博客了，当然了是关于web开发的相关的技术了。&lt;/p&gt;

&lt;p&gt;写这篇做个开头，也希望自己以后能坚持分享，坚持写，加油。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/08/welcome-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/08/welcome-2016/</guid>
        
        <category>life</category>
        
        
      </item>
    
  </channel>
</rss>
